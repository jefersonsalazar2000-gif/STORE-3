// ProductsGrid.jsx — pega este archivo tal cual.
// Asegura que tienes tu JSON en ./products.json (el que me pasaste).
// Soluciona “fotos cruzadas” usando una sola lista y keys estables (id).

import React, { useMemo, useState } from "react";
import data from "./products.json" assert { type: "json" };

function toList(obj) {
  // Convierte { id: producto } -> [{id, ...producto}], preserva orden de inserción
  return Object.entries(obj || {}).map(([id, p]) => ({ id, ...p }));
}

function normalizeUrl(url, id) {
  if (!url) return "";
  // Rompe caché antiguo para que no se “pegue” una imagen previa
  const hasQuery = url.includes("?");
  return `${url}${hasQuery ? "&" : "?"}pid=${encodeURIComponent(id)}`;
}

function ProductCard({ item }) {
  const [src, setSrc] = useState(normalizeUrl(item.IMAGE, item.id));
  return (
    <article
      className="rounded-3xl p-4 bg-[#10121A] text-white shadow-[0_0_0_1px_rgba(255,255,255,0.06)] hover:shadow-[0_0_0_2px_rgba(155,135,245,0.5)] transition-shadow"
      style={{ overflow: "hidden" }}
    >
      <div
        className="rounded-2xl mb-4"
        style={{
          background:
            "linear-gradient(135deg,#47E5FF22,#9B87F522) border-box",
          padding: 2,
        }}
      >
        <img
          src={src}
          alt={item.TITLE}
          loading="lazy"
          className="w-full h-[220px] object-contain rounded-2xl bg-[#0c0f17]"
          onError={() => {
            // Si falla la imagen, intentamos una vez sin el buster.
            if (src.includes("pid=")) {
              setSrc(item.IMAGE);
            }
          }}
        />
      </div>

      <h3 className="font-semibold text-[17px] leading-snug line-clamp-2">
        {item.TITLE}
      </h3>
      <p className="mt-1 text-sm text-[#AAB2C8]">
        {item.CATEGORY}
        {item.PRICE ? ` · $${item.PRICE}` : ""}
      </p>

      <a
        href={item.AMAZON}
        target="_blank"
        rel="noreferrer"
        className="mt-4 inline-flex items-center justify-center w-full rounded-2xl px-4 py-3 font-semibold"
        style={{
          background:
            "linear-gradient(90deg,#47E5FF,#9B87F5 50%,#FF3CAC)",
        }}
      >
        Ver en Amazon
      </a>
    </article>
  );
}

export default function ProductsGrid() {
  const [q, setQ] = useState("");
  const [cat, setCat] = useState("Todas");
  const [onlyFeat, setOnlyFeat] = useState(false);

  const list = useMemo(() => {
    let arr = toList(data.PRODUCTOS);

    // FILTROS (si quieres mostrar destacados o por categoría)
    if (onlyFeat) arr = arr.filter((x) => x.FEATURE === true);
    if (cat !== "Todas") arr = arr.filter((x) => (x.CATEGORY || "").includes(cat));
    if (q.trim()) {
      const t = q.toLowerCase();
      arr = arr.filter(
        (x) =>
          x.TITLE.toLowerCase().includes(t) ||
          (x.CATEGORY || "").toLowerCase().includes(t)
      );
    }

    // Orden estable: destacados primero, luego título
    arr.sort((a, b) => Number(b.FEATURE) - Number(a.FEATURE) || a.TITLE.localeCompare(b.TITLE));
    return arr;
  }, [q, cat, onlyFeat]);

  // categorías únicas
  const categories = useMemo(() => {
    const set = new Set(Object.values(data.PRODUCTOS).map((p) => p.CATEGORY || "Otros"));
    return ["Todas", ...Array.from(set)];
  }, []);

  return (
    <div className="max-w-7xl mx-auto p-4 md:p-6">
      {/* Barra superior */}
      <div className="flex flex-col md:flex-row gap-3 md:gap-4 items-stretch md:items-center mb-6">
        <input
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="Buscar productos… (ej. iPhone, smartwatch)"
          className="flex-1 rounded-2xl px-4 py-3 bg-[#0c0f17] text-white outline-none border border-white/10"
        />
        <select
          value={cat}
          onChange={(e) => setCat(e.target.value)}
          className="rounded-2xl px-4 py-3 bg-[#0c0f17] text-white border border-white/10"
        >
          {categories.map((c) => (
            <option key={c} value={c}>
              {c}
            </option>
          ))}
        </select>
        <label className="inline-flex items-center gap-2 text-white">
          <input
            type="checkbox"
            checked={onlyFeat}
            onChange={(e) => setOnlyFeat(e.target.checked)}
          />
          Destacados
        </label>
      </div>

      {/* GRID (sin índices como key, imagen viene del MISMO objeto) */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5">
        {list.map((item) => (
          <ProductCard key={item.id} item={item} />
        ))}
      </div>
    </div>
  );
}
